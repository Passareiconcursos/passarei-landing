# ADICIONAR BOT√ÉO "CRIAR CONTE√öDO" NA P√ÅGINA /educ/content

## Local
Arquivo: `app/educ/content/page.tsx`

## Implementar

### 1. Adicionar bot√£o no topo da p√°gina:
```tsx
<div className="flex justify-between items-center mb-6">
  <h1 className="text-3xl font-bold">Conte√∫do</h1>
  
  <button
    onClick={() => router.push('/educ/content/new')}
    className="bg-[#18cb96] text-white px-6 py-3 rounded-lg hover:bg-[#15b385] flex items-center gap-2"
  >
    <Plus size={20} />
    Criar Conte√∫do
  </button>
</div>
```

### 2. Criar p√°gina de cria√ß√£o de conte√∫do:

Criar arquivo: `app/educ/content/new/page.tsx`
```tsx
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'

export default function NewContentPage() {
  const router = useRouter()
  const [loading, setLoading] = useState(false)
  
  const [formData, setFormData] = useState({
    title: '',
    subject: '',
    body: '',
    examType: '',
    status: 'DRAFT'
  })
  
  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault()
    setLoading(true)
    
    try {
      const response = await fetch('/api/admin/content', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      })
      
      if (response.ok) {
        alert('Conte√∫do criado com sucesso!')
        router.push('/educ/content')
      } else {
        throw new Error('Erro ao criar conte√∫do')
      }
    } catch (error) {
      alert('Erro ao criar conte√∫do')
    } finally {
      setLoading(false)
    }
  }
  
  return (
    <div className="p-8 max-w-4xl">
      <h1 className="text-3xl font-bold mb-8">Criar Novo Conte√∫do</h1>
      
      <form onSubmit={handleSubmit} className="bg-white rounded-lg shadow p-6 space-y-6">
        
        {/* T√≠tulo */}
        <div>
          <label className="block text-sm font-medium mb-2">
            T√≠tulo *
          </label>
          <input
            type="text"
            value={formData.title}
            onChange={(e) => setFormData({...formData, title: e.target.value})}
            placeholder="Ex: Princ√≠pio da Legalidade"
            className="w-full px-4 py-2 border rounded-lg"
            required
          />
        </div>
        
        {/* Mat√©ria */}
        <div>
          <label className="block text-sm font-medium mb-2">
            Mat√©ria *
          </label>
          <select
            value={formData.subject}
            onChange={(e) => setFormData({...formData, subject: e.target.value})}
            className="w-full px-4 py-2 border rounded-lg"
            required
          >
            <option value="">Selecione...</option>
            <option value="Direito Penal">Direito Penal</option>
            <option value="Direito Constitucional">Direito Constitucional</option>
            <option value="Direito Administrativo">Direito Administrativo</option>
            <option value="Portugu√™s">Portugu√™s</option>
            <option value="Racioc√≠nio L√≥gico">Racioc√≠nio L√≥gico</option>
            <option value="Inform√°tica">Inform√°tica</option>
          </select>
        </div>
        
        {/* Concurso */}
        <div>
          <label className="block text-sm font-medium mb-2">
            Concurso *
          </label>
          <select
            value={formData.examType}
            onChange={(e) => setFormData({...formData, examType: e.target.value})}
            className="w-full px-4 py-2 border rounded-lg"
            required
          >
            <option value="">Selecione...</option>
            <option value="PM">PM - Pol√≠cia Militar</option>
            <option value="PC">PC - Pol√≠cia Civil</option>
            <option value="PRF">PRF - Pol√≠cia Rodovi√°ria Federal</option>
            <option value="PF">PF - Pol√≠cia Federal</option>
            <option value="ALL">Todos</option>
          </select>
        </div>
        
        {/* Conte√∫do */}
        <div>
          <label className="block text-sm font-medium mb-2">
            Conte√∫do *
          </label>
          <textarea
            value={formData.body}
            onChange={(e) => setFormData({...formData, body: e.target.value})}
            placeholder="Escreva o conte√∫do educacional aqui (200-500 palavras)..."
            className="w-full px-4 py-2 border rounded-lg min-h-[300px]"
            required
          />
          <p className="text-sm text-gray-500 mt-1">
            {formData.body.length} caracteres
          </p>
        </div>
        
        {/* Status */}
        <div>
          <label className="block text-sm font-medium mb-2">
            Status
          </label>
          <div className="flex gap-4">
            <label className="flex items-center gap-2">
              <input
                type="radio"
                value="DRAFT"
                checked={formData.status === 'DRAFT'}
                onChange={(e) => setFormData({...formData, status: e.target.value})}
              />
              Rascunho (n√£o vis√≠vel para usu√°rios)
            </label>
            <label className="flex items-center gap-2">
              <input
                type="radio"
                value="PUBLISHED"
                checked={formData.status === 'PUBLISHED'}
                onChange={(e) => setFormData({...formData, status: e.target.value})}
              />
              Publicado (vis√≠vel para usu√°rios)
            </label>
          </div>
        </div>
        
        {/* A√ß√µes */}
        <div className="flex gap-4">
          <button
            type="submit"
            disabled={loading}
            className="bg-[#18cb96] text-white px-8 py-3 rounded-lg hover:bg-[#15b385] disabled:opacity-50"
          >
            {loading ? 'Salvando...' : 'Salvar Conte√∫do'}
          </button>
          
          <button
            type="button"
            onClick={() => router.back()}
            className="bg-gray-200 text-gray-700 px-8 py-3 rounded-lg hover:bg-gray-300"
          >
            Cancelar
          </button>
        </div>
      </form>
    </div>
  )
}
```

### 3. Criar API route para salvar:

Criar arquivo: `app/api/admin/content/route.ts`
```typescript
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

export async function POST(req: NextRequest) {
  try {
    const body = await req.json()
    const { title, subject, body: contentBody, examType, status } = body
    
    // Validar dados
    if (!title || !subject || !contentBody || !examType) {
      return NextResponse.json(
        { error: 'Campos obrigat√≥rios faltando' },
        { status: 400 }
      )
    }
    
    // Criar conte√∫do
    const content = await prisma.content.create({
      data: {
        title,
        subject,
        body: contentBody,
        examType,
        status,
        createdBy: 'ADMIN' // Pegar do token JWT depois
      }
    })
    
    return NextResponse.json({ success: true, content })
  } catch (error) {
    console.error('Erro ao criar conte√∫do:', error)
    return NextResponse.json(
      { error: 'Erro ao criar conte√∫do' },
      { status: 500 }
    )
  }
}
```

### 4. Atualizar Schema Prisma (se necess√°rio):

Verificar se `Content` tem esses campos:
```prisma
model Content {
  id        String   @id @default(cuid())
  title     String
  subject   String
  body      String   @db.Text
  examType  String   // PM, PC, PRF, PF, ALL
  status    String   @default("DRAFT") // DRAFT, PUBLISHED
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("contents")
}
```

Se faltar algum campo, adicionar e rodar:
```bash
npx prisma db push
```
```

---

## üì± COMO FUNCIONA: Conte√∫do ‚Üí WhatsApp

### Fluxo Completo:
```
1. VOC√ä (Admin)
   ‚îî‚îÄ> Cria conte√∫do em /educ/content/new
   ‚îî‚îÄ> Status: PUBLISHED
   ‚îî‚îÄ> Salva no banco (Prisma)

2. N8N (Automa√ß√£o - Semana 3)
   ‚îî‚îÄ> Trigger: Todo dia √†s 8h
   ‚îî‚îÄ> Busca: 1 conte√∫do PUBLISHED aleat√≥rio
   ‚îî‚îÄ> Para cada usu√°rio ATIVO:
       ‚îî‚îÄ> Envia via WhatsApp API

3. WHATSAPP
   ‚îî‚îÄ> Usu√°rio recebe: "üìö Bom dia! Hoje: [T√≠tulo]
                        [Conte√∫do de 300 palavras]
                        Entendeu? üëç Sim | ‚ùì D√∫vida"

4. USU√ÅRIO RESPONDE
   ‚îî‚îÄ> "üëç" ‚Üí Sistema envia quest√£o
   ‚îî‚îÄ> "‚ùì" ‚Üí Sistema envia explica√ß√£o expandida
   ‚îî‚îÄ> Outro ‚Üí Sistema pede confirma√ß√£o

5. SISTEMA DE QUEST√ïES
   ‚îî‚îÄ> Envia 5 quest√µes sobre o conte√∫do
   ‚îî‚îÄ> Valida respostas
   ‚îî‚îÄ> D√° feedback imediato
   ‚îî‚îÄ> Salva progresso no banco

6. RELAT√ìRIO
   ‚îî‚îÄ> "Voc√™ acertou 4/5! Taxa: 80%
        Sequ√™ncia: 3 dias üî•
        Pontos: +40"