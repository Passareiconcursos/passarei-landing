# CORREÇÕES CRÍTICAS NO ADMIN - PASSAREI

## CONTEXTO
O admin está parcialmente funcional. Preciso corrigir 8 problemas específicos.

## ERROS A CORRIGIR

### 1. Campo de Senha - Adicionar Toggle "Ver Senha"

**Local:** `client/src/components/admin/LoginForm.tsx` (ou similar)

**Implementar:**
```tsx
import { useState } from 'react'
import { Eye, EyeOff } from 'lucide-react'

export function PasswordInput({ value, onChange, ...props }) {
  const [showPassword, setShowPassword] = useState(false)
  
  return (
    <div className="relative">
      <input
        type={showPassword ? 'text' : 'password'}
        value={value}
        onChange={onChange}
        className="w-full pr-10 px-4 py-2 border rounded-lg"
        {...props}
      />
      <button
        type="button"
        onClick={() => setShowPassword(!showPassword)}
        className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-700"
      >
        {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
      </button>
    </div>
  )
}
```

**Usar no form:**
```tsx
<PasswordInput
  value={password}
  onChange={(e) => setPassword(e.target.value)}
  placeholder="Digite sua senha"
/>
```

---

### 2. reCAPTCHA v3 no Login

**Instalar:**
```bash
npm install react-google-recaptcha-v3
```

**Configurar provider em `app/admin/layout.tsx`:**
```tsx
import { GoogleReCaptchaProvider } from 'react-google-recaptcha-v3'

export default function AdminLayout({ children }) {
  return (
    <GoogleReCaptchaProvider
      reCaptchaKey="6LfFmfQrAAAAAAo8sRWOz6vGIw0tbAvt1nrbtsfW"
      language="pt-BR"
    >
      {children}
    </GoogleReCaptchaProvider>
  )
}
```

**Usar no LoginForm:**
```tsx
import { useGoogleReCaptcha } from 'react-google-recaptcha-v3'

export function LoginForm() {
  const { executeRecaptcha } = useGoogleReCaptcha()
  
  async function handleSubmit(e) {
    e.preventDefault()
    
    if (!executeRecaptcha) {
      console.error('reCAPTCHA não carregado')
      return
    }
    
    // Gerar token
    const recaptchaToken = await executeRecaptcha('login')
    
    // Enviar para backend
    const response = await fetch('/api/admin/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email,
        password,
        recaptchaToken // Incluir token
      })
    })
    
    // ...resto do código
  }
}
```

**Validar no backend (`server/routes/admin.ts`):**
```typescript
import fetch from 'node-fetch'

async function verifyRecaptcha(token: string) {
  const secretKey = '6LfFmfQrAAAAAKd6WGbw1zCD0T1eBes6_NMGdzm9'
  
  const response = await fetch(
    `https://www.google.com/recaptcha/api/siteverify?secret=${secretKey}&response=${token}`,
    { method: 'POST' }
  )
  
  const data = await response.json()
  
  return data.success && data.score >= 0.5 // Score mínimo 0.5
}

// No endpoint de login:
router.post('/api/admin/login', async (req, res) => {
  const { email, password, recaptchaToken } = req.body
  
  // 1. Verificar reCAPTCHA
  const isHuman = await verifyRecaptcha(recaptchaToken)
  if (!isHuman) {
    return res.status(403).json({ error: 'Falha na verificação reCAPTCHA' })
  }
  
  // 2. Validar credenciais
  // ...resto do código
})
```

**Adicionar em `.env.local`:**
```bash
RECAPTCHA_SITE_KEY=6LfFmfQrAAAAAAo8sRWOz6vGIw0tbAvt1nrbtsfW
RECAPTCHA_SECRET_KEY=6LfFmfQrAAAAAKd6WGbw1zCD0T1eBes6_NMGdzm9
```

---

### 3. Mudar Rota de `/admin` para `/educ`

**IMPORTANTE:** Obscurecer admin aumenta segurança por obscuridade.

**Arquivos a modificar:**

**1. Renomear pasta:**
```bash
# De:
app/admin/

# Para:
app/educ/
```

**2. Atualizar todos os links:**
```tsx
// Buscar e substituir em TODO o projeto:
// DE: '/admin'
// PARA: '/educ'

// Exemplos:
<Link href="/educ">Dashboard</Link>
<Link href="/educ/leads">Leads</Link>
redirect('/educ/login')
```

**3. Middleware (`middleware.ts`):**
```typescript
export function middleware(req: NextRequest) {
  if (req.nextUrl.pathname.startsWith('/educ')) {
    // Proteger rotas /educ/*
    const token = req.cookies.get('admin_token')
    
    if (!token && req.nextUrl.pathname !== '/educ/login') {
      return NextResponse.redirect(new URL('/educ/login', req.url))
    }
  }
  
  return NextResponse.next()
}

export const config = {
  matcher: ['/educ/:path*']
}
```

**4. Adicionar redirect de `/admin` para 404:**
```tsx
// app/admin/page.tsx
export default function AdminRedirect() {
  redirect('/404') // Ou página home
}
```

---

### 4-8. Criar Páginas Faltantes

**Páginas que dão 404:**
- `/educ/users` (Usuários)
- `/educ/revenue` (Receita)
- `/educ/content` (Conteúdo)
- `/educ/notifications` (Notificações)
- `/educ/settings` (Configurações)

**Para CADA uma, criar:**
```
app/educ/
├── users/
│   └── page.tsx          ← Criar este arquivo
├── revenue/
│   └── page.tsx          ← Criar este arquivo
├── content/
│   └── page.tsx          ← Criar este arquivo
├── notifications/
│   └── page.tsx          ← Criar este arquivo
└── settings/
    └── page.tsx          ← Criar este arquivo
```

**Template base para cada página:**
```tsx
// app/educ/users/page.tsx
export default function UsersPage() {
  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold mb-6">Usuários</h1>
      
      <div className="bg-white rounded-lg shadow p-6">
        <p className="text-gray-500">
          Página em construção. Funcionalidade será implementada em breve.
        </p>
      </div>
    </div>
  )
}
```

**Depois, implementar funcionalidades completas baseadas no PRD que enviei.**

---

### 9. Página de Configurações - Funcionalidades

**Local:** `app/educ/settings/page.tsx`

**Implementar:**
```tsx
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'

export default function SettingsPage() {
  const router = useRouter()
  const [loading, setLoading] = useState(false)
  
  // Estados
  const [name, setName] = useState('Admin')
  const [email, setEmail] = useState('admin@passarei.com.br')
  const [currentPassword, setCurrentPassword] = useState('')
  const [newPassword, setNewPassword] = useState('')
  const [confirmPassword, setConfirmPassword] = useState('')
  const [logo, setLogo] = useState<File | null>(null)
  
  async function handleUpdateProfile(e: React.FormEvent) {
    e.preventDefault()
    setLoading(true)
    
    try {
      const response = await fetch('/api/admin/update-profile', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, email })
      })
      
      if (response.ok) {
        alert('Perfil atualizado com sucesso!')
      } else {
        throw new Error('Erro ao atualizar perfil')
      }
    } catch (error) {
      alert('Erro ao atualizar perfil')
    } finally {
      setLoading(false)
    }
  }
  
  async function handleChangePassword(e: React.FormEvent) {
    e.preventDefault()
    
    if (newPassword !== confirmPassword) {
      alert('Senhas não coincidem')
      return
    }
    
    if (newPassword.length < 8) {
      alert('Senha deve ter no mínimo 8 caracteres')
      return
    }
    
    setLoading(true)
    
    try {
      const response = await fetch('/api/admin/change-password', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ currentPassword, newPassword })
      })
      
      if (response.ok) {
        alert('Senha alterada com sucesso!')
        setCurrentPassword('')
        setNewPassword('')
        setConfirmPassword('')
      } else {
        throw new Error('Senha atual incorreta')
      }
    } catch (error) {
      alert('Erro ao alterar senha')
    } finally {
      setLoading(false)
    }
  }
  
  async function handleLogoUpload(e: React.FormEvent) {
    e.preventDefault()
    
    if (!logo) return
    
    setLoading(true)
    
    const formData = new FormData()
    formData.append('logo', logo)
    
    try {
      const response = await fetch('/api/admin/upload-logo', {
        method: 'POST',
        body: formData
      })
      
      if (response.ok) {
        alert('Logo atualizado com sucesso!')
        router.refresh()
      }
    } catch (error) {
      alert('Erro ao fazer upload do logo')
    } finally {
      setLoading(false)
    }
  }
  
  return (
    <div className="p-8 max-w-4xl">
      <h1 className="text-3xl font-bold mb-8">Configurações</h1>
      
      {/* Seção 1: Perfil */}
      <section className="bg-white rounded-lg shadow p-6 mb-6">
        <h2 className="text-xl font-semibold mb-4">Informações do Perfil</h2>
        
        <form onSubmit={handleUpdateProfile} className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-1">Nome</label>
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full px-4 py-2 border rounded-lg"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1">Email</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-4 py-2 border rounded-lg"
            />
          </div>
          
          <button
            type="submit"
            disabled={loading}
            className="bg-[#18cb96] text-white px-6 py-2 rounded-lg hover:bg-[#15b385] disabled:opacity-50"
          >
            {loading ? 'Salvando...' : 'Salvar Alterações'}
          </button>
        </form>
      </section>
      
      {/* Seção 2: Alterar Senha */}
      <section className="bg-white rounded-lg shadow p-6 mb-6">
        <h2 className="text-xl font-semibold mb-4">Alterar Senha</h2>
        
        <form onSubmit={handleChangePassword} className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-1">Senha Atual</label>
            <input
              type="password"
              value={currentPassword}
              onChange={(e) => setCurrentPassword(e.target.value)}
              className="w-full px-4 py-2 border rounded-lg"
              required
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1">Nova Senha</label>
            <input
              type="password"
              value={newPassword}
              onChange={(e) => setNewPassword(e.target.value)}
              className="w-full px-4 py-2 border rounded-lg"
              required
              minLength={8}
            />
            <p className="text-xs text-gray-500 mt-1">Mínimo 8 caracteres</p>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1">Confirmar Nova Senha</label>
            <input
              type="password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              className="w-full px-4 py-2 border rounded-lg"
              required
            />
          </div>
          
          <button
            type="submit"
            disabled={loading}
            className="bg-[#18cb96] text-white px-6 py-2 rounded-lg hover:bg-[#15b385] disabled:opacity-50"
          >
            {loading ? 'Alterando...' : 'Alterar Senha'}
          </button>
        </form>
      </section>
      
      {/* Seção 3: Logo */}
      <section className="bg-white rounded-lg shadow p-6">
        <h2 className="text-xl font-semibold mb-4">Logo do Sistema</h2>
        
        <form onSubmit={handleLogoUpload} className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-1">Upload do Logo</label>
            <input
              type="file"
              accept="image/*"
              onChange={(e) => setLogo(e.target.files?.[0] || null)}
              className="w-full"
            />
            <p className="text-xs text-gray-500 mt-1">PNG ou JPG, máximo 2MB</p>
          </div>
          
          <button
            type="submit"
            disabled={loading || !logo}
            className="bg-[#18cb96] text-white px-6 py-2 rounded-lg hover:bg-[#15b385] disabled:opacity-50"
          >
            {loading ? 'Enviando...' : 'Atualizar Logo'}
          </button>
        </form>
      </section>
    </div>
  )
}
```

---

## RESUMO DAS CORREÇÕES

**9 problemas → 9 soluções:**

1. ✅ Toggle ver senha
2. ✅ reCAPTCHA v3
3. ✅ Mudar `/admin` → `/educ`
4. ✅ Criar página Usuários
5. ✅ Criar página Receita
6. ✅ Criar página Conteúdo
7. ✅ Criar página Notificações
8. ✅ Criar página Configurações (completa)
9. ✅ Funcionalidades de Settings

---

## PRIORIDADE DE EXECUÇÃO

**Replit Agent deve fazer nesta ordem:**

1. Toggle senha (5 min)
2. reCAPTCHA (15 min)
3. Renomear /admin → /educ (10 min)
4. Criar 5 páginas faltantes com template base (10 min)
5. Implementar Settings completo (20 min)

**Total: ~1 hora de Agent**

---

## CUSTO ESTIMADO

Tokens para corrigir tudo: **~2.000-3.000 tokens** = R$ 0,30-0,50

**Vale MUITO a pena** vs. migrar para template (perder 2 dias).